Explanation:

A user opens their browser and types in the URL www.foobar.com
The browser sends a DNS request to resolve www.foobar.com to an IP address
The DNS server returns the IP address 8.8.8.8
The browser sends an HTTP request to IP 8.8.8.8
The request hits the web server (Nginx) listening on port 80 at IP 8.8.8.8
The web server processes the request and passes it to the application server
The application server runs the foobar application code
The application code queries the MySQL database for any required data
The application generates an HTML response and returns it to the web server
The web server returns the HTML to the user's browser
The browser renders the HTML
Key points:

www is a DNS CNAME record pointing to the server IP
The web server (Nginx) receives the HTTP request and serves the static assets
The application server runs the application code and generates the dynamic content
The database stores and retrieves data for the application
The server uses TCP/IP networking to communicate with the user's computer
Issues:

SPOF - Single point of failure, if the one server goes down everything is offline
Downtime when rebooting services like web server for updates
Cannot scale to handle increased traffic with a single server
Some ways to improve:

Add a load balancer and scale horizontally with multiple web/app servers
Decouple the database onto a separate server
Implement a CDN to cache static assets
Make servers stateless and store session data elsewhere like Redis
